<?xml version="1.0" encoding="UTF-8"?>

<!-- This is a Spring Application Context definition file -->

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">


	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
	<!-- Scans within the base package of the application for @Components to 
		configure as beans -->
	<!-- @Controller, @Service, @Configuration, etc. -->
	<context:component-scan base-package="com.inplayrs.rest.controller" />
	<context:component-scan base-package="com.inplayrs.rest.service" />
	<context:component-scan base-package="com.inplayrs.rest.ds" />
	<context:component-scan base-package="com.inplayrs.rest.mapper" />
	<context:component-scan base-package="com.inplayrs.rest.responseds" />
	<context:component-scan base-package="com.inplayrs.rest.exception" />

	<!-- Configure support for new Spring MVC features such as declarative validation 
		with @Valid, HTTP message conversion with @RequestBody/@ResponseBody, new 
		field conversion architecture, etc -->
	<mvc:annotation-driven />

	<!-- To enable @RequestMapping process on type level and method level -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" />


	<!-- Maps handler methods based on HTTP paths, HTTP methods and request 
		parameters expressed through the RequestMapping annotation -->
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="jsonConverter" />
				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />
				<!-- <ref bean="marshallingConverter" /> -->
			</list>
		</property>
	</bean>


	<!-- HttpMessageConverter - HTTP requests and responses are text based. 
		With Spring, methods returned from the controller class could be java objects. 
		HTTPMessageConverter converts these objects into raw text. The MappingJackson2HttpMessageConverter 
		enables you to Read/write JSON data using Jackson's ObjectMapper. It converts 
		data of media type application/json. -->
	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes" value="application/json" />
		<property name="objectMapper" ref="jacksonObjectMapper" />
	</bean>

	<!-- This is meant to ensure that jodatime times are serialized / deserialised 
		from JSON correctly however it doesn't seem to work and we created CustomDateTimeSerializer 
		and CustomDateTimeDeserializer to do the job. We may want to remove the below 
		at some point -->
	<bean id="jacksonObjectMapper" class="com.inplayrs.rest.mapper.CustomObjectMapper" />
	<bean id="jacksonSerializationConfig" class="com.fasterxml.jackson.databind.SerializationConfig"
		factory-bean="jacksonObjectMapper" factory-method="getSerializationConfig">
	</bean>


	<!-- This is another type of HttpMessageConverter. The MarshallingHttpMessageConverter 
		enables you to Read/write XML data using Spring's marshaller/un-marshaller. 
		It converts data of media type application/xml.-#-> <bean id="marshallingConverter" 
		class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter"> 
		<constructor-arg ref="jaxbMarshaller" /> <property name="supportedMediaTypes" 
		value="application/xml"/> </bean> <!-#- Use JAXB2 as the marshaller -#-> 
		<bean id="jaxbMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller"> 
		<property name="classesToBeBound"> <list> <value>com.inplayrs.rest.ds.User</value> 
		</list> </property> </bean> -->

	<!-- View Resolver - resolve logical view names to .jsp resources in the 
		/WEB-INF/views directory -->
	<!-- Takes the view name returned by the controller, and prepends it with 
		an optional prefix (empty by default), and appends it with an optional suffix 
		(empty by default), then feeds that resultant path to a JstlView it creates. 
		The JstlView then delegates to the Servlet engine's RequestDispatcher to 
		do the real work, i.e. rendering the template -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/views/</value>
		</property>

		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

	

	<!-- Load Hibernate related configuration (for connecting to MYSQL DB) -->
	<import resource="hibernate-context.xml" />

	<!-- Set sessionFactory for IPUtil -->
	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="staticMethod" value="com.inplayrs.rest.util.IPUtil.setSessionFactory" />
	    <property name="arguments">
	        <list>
	            <!-- This is the bean name that holds database-settings.properties -->
	            <ref bean="sessionFactory" />
	        </list>
	    </property>
	</bean>

</beans>